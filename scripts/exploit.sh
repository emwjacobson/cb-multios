#!/bin/bash

trap kill_program INT

export AFL_IMPORT_FIRST=1

function kill_program() {
  echo "Exiting..."
#  kill -9 $(pidof afl-fuzz) Seems to kill itself properly
  kill -9 $(pidof symcc_fuzzing_helper)

  exit 0
}

ROOT_DIR=/cb-multios
PERSISTENT_ROOT=/persistent
SCRIPTS_DIR=${ROOT_DIR}/scripts

BUILD_CLEAN=${ROOT_DIR}/build
BUILD_AFL=${ROOT_DIR}/build_afl
BUILD_SYMCC=${ROOT_DIR}/build_symcc

CHALLENGES_SRC=${ROOT_DIR}/challenges
CHALLENGES_CLEAN=${BUILD_CLEAN}/challenges
CHALLENGES_AFL=${BUILD_AFL}/challenges
CHALLENGES_SYMCC=${BUILD_SYMCC}/challenges

SYMCC_HELPER=/root/.cargo/bin/symcc_fuzzing_helper # Could also add /root/.cargo/bin to path...

DEBUG=0

if [[ $1 == "debug" ]]; then
  echo "Enabling debug mode..."
  DEBUG=1
fi

CORE_PATTERN=`cat /proc/sys/kernel/core_pattern`
if [[ ${CORE_PATTERN} != 'core' ]]; then
  echo "Error: /proc/sys/kernel/core_pattern needs to be set to 'core'"
  echo "Please run 'echo core | sudo tee /proc/sys/kernel/core_pattern' for AFL to perform correctly"
  echo "NOTE: THIS NEEDS TO BE DONE ON THE HOST MACHINE (EG. THE ONE RUNNING DOCKER)"
  exit 1
fi

for CHALLENGE_DIR in ${CHALLENGES_SRC}/*; do
  CHALLENGE_NAME=`basename ${CHALLENGE_DIR}`
  PERSISTENT_LOCAL=${PERSISTENT_ROOT}/${CHALLENGE_NAME}; mkdir -p ${PERSISTENT_LOCAL}
  EXE_CLEAN=${CHALLENGES_CLEAN}/${CHALLENGE_NAME}/${CHALLENGE_NAME}
  EXE_AFL=${CHALLENGES_AFL}/${CHALLENGE_NAME}/${CHALLENGE_NAME}
  EXE_SYMCC=${CHALLENGES_SYMCC}/${CHALLENGE_NAME}/${CHALLENGE_NAME}

  echo "Processing ${CHALLENGE_NAME}"
  
  mkdir -p ${PERSISTENT_LOCAL}/in ${PERSISTENT_LOCAL}/out
  echo "A" > ${PERSISTENT_LOCAL}/in/init # Initial seed, should make better later :)
  # strings -d Accel | grep -v cgc > ${CHALLENGE_DIR}/in/

  # Details on multi-core/system Fuzzing
  # https://github.com/AFLplusplus/AFLplusplus/blob/stable/docs/fuzzing_in_depth.md
  # Parallel fuzzing recommendations I went with:
  # Main      - exploit power schedule
  # Secondary - coe power schedule, MOpt mutator -L 0


  # Start Main AFL
  NAME="${CHALLENGE_NAME}-M"

  COMMAND="afl-fuzz -i ${PERSISTENT_LOCAL}/in -o ${PERSISTENT_LOCAL}/out -M ${NAME} -p exploit -- ${EXE_AFL}"
  if [[ ${DEBUG} -eq 1 ]]; then
    ${COMMAND} | tee ${CHALLENGES_AFL}/${NAME}.out &
  else
    ${COMMAND} > ${CHALLENGES_AFL}/${NAME}.out &
  fi
  printf "\tStarted AFL++ Main\n"


  # Start Secondary AFL
  NAME="${CHALLENGE_NAME}-S"

  COMMAND="afl-fuzz -i ${PERSISTENT_LOCAL}/in -o ${PERSISTENT_LOCAL}/out -M ${NAME} -p coe -L 0 -- ${EXE_AFL}"
  if [[ ${DEBUG} -eq 1 ]]; then
    ${COMMAND} | tee ${CHALLENGES_AFL}/${NAME}.out &
  else
    ${COMMAND} > ${CHALLENGES_AFL}/${NAME}.out &
  fi
  printf "\tStarted AFL++ secondary\n"

  printf "\tWaiting for file to exist..."
  until [ -f ${PERSISTENT_LOCAL}/out/${NAME}/fuzzer_stats ]; do
    sleep 0.2
    printf "."
  done
  printf " DONE!\n"

  # Have SymCC follow secondary AFL
  COMMAND="${SYMCC_HELPER} -o ${PERSISTENT_LOCAL}/out -a ${NAME} -n symcc -- ${EXE_SYMCC}"
  rm -rf ${PERSISTENT_LOCAL}/out/symcc # Need to delete symcc - doesnt support "resuming"
  if [[ ${DEBUG} -eq 1 ]]; then
    ${COMMAND} 2>&1 | tee ${CHALLENGES_SYMCC}/${NAME}.out &
  else
    ${COMMAND} > ${CHALLENGES_SYMCC}/${NAME}.out 2>&1 &
  fi
  printf "\tStarted SymCC\n"

  printf "\n"
done

wait
