#!/bin/bash

trap handle_crash SIGUSR1

function handle_crash() {
  echo "Crash detected!"
}

echo "PID OF THIS SCRIPT: $$"

ROOT_DIR=/cb-multios
AFL_BUILD_DIR=${ROOT_DIR}/build_afl/challenges
BUILD_DIR=${ROOT_DIR}/build/challenges
SYMCC_BUILD_DIR=${ROOT_DIR}/build/challenges
SYMCC_HELPER=/root/.cargo/bin/symcc_fuzzing_helper
AFL_NUM_FOLLOWERS=1
DEBUG=0

if [[ $1 == "debug" ]]; then
  echo "Enabling debug mode..."
  DEBUG=1
fi

CORE_PATTERN=`cat /proc/sys/kernel/core_pattern`
if [[ ${CORE_PATTERN} != 'core' ]]; then
  echo "Error: /proc/sys/kernel/core_pattern needs to be set to 'core'"
  echo "Please run 'echo core | sudo tee /proc/sys/kernel/core_pattern' for AFL to perform correctly"
  echo "NOTE: THIS NEEDS TO BE DONE ON THE HOST MACHINE (EG. THE ONE RUNNING DOCKER)"
  exit 1
fi

PIDS=()

i=0
for CHALLENGE_DIR in ${AFL_BUILD_DIR}/*; do
  CHALLENGE_NAME=`basename ${CHALLENGE_DIR}`

  echo "Processing ${CHALLENGE_NAME}"
  
  mkdir -p ${CHALLENGE_DIR}/in ${CHALLENGE_DIR}/out
  mkdir -p ${ROOT_DIR}/crashes/${CHALLENGE_NAME}
  echo "AAAAAAAAAAAAAAAAAAAAAAAAA" > ${CHALLENGE_DIR}/in/init
  mkdir -p ${ROOT_DIR}/${CHALLENGE_NAME}
  # strings -d Accel | grep -v cgc > ${CHALLENGE_DIR}/in/

  # Details on multi-core/system Fuzzing
  # https://github.com/AFLplusplus/AFLplusplus/blob/stable/docs/fuzzing_in_depth.md

  # Start AFL++
  NAME="${CHALLENGE_NAME}-M"
  COMMAND="afl-fuzz -i ${CHALLENGE_DIR}/in -o ${CHALLENGE_DIR}/out -M ${NAME} \
    -I ${ROOT_DIR}/crash_check.sh -m none -- ${CHALLENGE_DIR}/${CHALLENGE_NAME}"

  if [[ ${DEBUG} -eq 1 ]]; then
    ${COMMAND} | tee ${CHALLENGE_DIR}/${NAME}.out &
  else
    ${COMMAND} > ${CHALLENGE_DIR}/${NAME}.out &
  fi
  sleep 1 # Wait a second (literally) before making the directory...
  rm -rf ${CHALLENGE_DIR}/out/${NAME}/crashes
  ln -s ${ROOT_DIR}/crashes/${CHALLENGE_NAME} ${CHALLENGE_DIR}/out/${NAME}/crashes

  PIDS[${i}]=$!
  printf "\tStarted AFL++ for ${CHALLENGE_NAME} PID: ${PIDS[${i}]}\n"
  i=`expr $i + 1`

  # Start SymCC
  COMMAND="${SYMCC_HELPER} -o ${CHALLENGE_DIR}/out -a ${NAME} -n symcc -- ${SYMCC_BUILD_DIR}/${CHALLENGE_NAME}/${CHALLENGE_NAME}"
  if [[ ${DEBUG} -eq 1 ]]; then
    ${COMMAND} 2>&1 | tee ${SYMCC_BUILD_DIR}/${CHALLENGE_NAME}/${NAME}.out &
  else
    ${COMMAND} > ${SYMCC_BUILD_DIR}/${CHALLENGE_NAME}/${NAME}.out 2>&1 &
  fi

  PIDS[${i}]=$!
  printf "\tStarted SymCC for ${CHALLENGE_NAME} PID: ${PIDS[${i}]}\n"
  i=`expr $i + 1`

  printf "\n"
done

for pid in ${PIDS[*]}; do
  wait $pid
done

for pid in ${PIDS[*]}; do
  kill $pid
done
